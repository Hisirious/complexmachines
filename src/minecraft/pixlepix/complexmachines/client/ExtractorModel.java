// Date: 05/05/2013 17:26:14
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package pixlepix.complexmachines.client;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class ExtractorModel extends ModelBase
{
  //fields
    ModelRenderer Base;
    ModelRenderer LegForLeft;
    ModelRenderer LefBackRight;
    ModelRenderer LegBackLeft;
    ModelRenderer LegForRight;
    ModelRenderer PinForLeft1;
    ModelRenderer PinBackLeft1;
    ModelRenderer PinForRight1;
    ModelRenderer PinBackRight1;
    ModelRenderer PinForRight2;
    ModelRenderer PinBackLeft2;
    ModelRenderer PinBackRight2;
    ModelRenderer PinForLeft2;
    ModelRenderer CentreBox;
    ModelRenderer Plate;
    ModelRenderer RimBack;
    ModelRenderer TopCentreCube;
    ModelRenderer RimLeft;
    ModelRenderer RimRight;
  
  public ExtractorModel()
  {
    textureWidth = 128;
    textureHeight = 128;
    
      Base = new ModelRenderer(this, 0, 0);
      Base.addBox(0F, 0F, 0F, 14, 1, 14);
      Base.setRotationPoint(-7F, 23F, -7F);
      Base.setTextureSize(128, 128);
      Base.mirror = true;
      setRotation(Base, 0F, 0F, 0F);
      LegForLeft = new ModelRenderer(this, 57, 0);
      LegForLeft.addBox(0F, 0F, 0F, 3, 8, 3);
      LegForLeft.setRotationPoint(-7F, 15F, -7F);
      LegForLeft.setTextureSize(128, 128);
      LegForLeft.mirror = true;
      setRotation(LegForLeft, 0F, 0F, 0F);
      LefBackRight = new ModelRenderer(this, 57, 0);
      LefBackRight.addBox(0F, 0F, 0F, 3, 8, 3);
      LefBackRight.setRotationPoint(4F, 15F, 4F);
      LefBackRight.setTextureSize(128, 128);
      LefBackRight.mirror = true;
      setRotation(LefBackRight, 0F, 0F, 0F);
      LegBackLeft = new ModelRenderer(this, 57, 0);
      LegBackLeft.addBox(0F, 0F, 0F, 3, 8, 3);
      LegBackLeft.setRotationPoint(-7F, 15F, 4F);
      LegBackLeft.setTextureSize(128, 128);
      LegBackLeft.mirror = true;
      setRotation(LegBackLeft, 0F, 0F, 0F);
      LegForRight = new ModelRenderer(this, 57, 0);
      LegForRight.addBox(0F, 0F, 0F, 3, 8, 3);
      LegForRight.setRotationPoint(4F, 15F, -7F);
      LegForRight.setTextureSize(128, 128);
      LegForRight.mirror = true;
      setRotation(LegForRight, 0F, 0F, 0F);
      PinForLeft1 = new ModelRenderer(this, 70, 0);
      PinForLeft1.addBox(0F, 0F, 0F, 1, 6, 3);
      PinForLeft1.setRotationPoint(-6F, 9F, -7F);
      PinForLeft1.setTextureSize(128, 128);
      PinForLeft1.mirror = true;
      setRotation(PinForLeft1, 0F, 0F, 0F);
      PinBackLeft1 = new ModelRenderer(this, 70, 0);
      PinBackLeft1.addBox(0F, 0F, 0F, 1, 5, 3);
      PinBackLeft1.setRotationPoint(-6F, 10F, 4F);
      PinBackLeft1.setTextureSize(128, 128);
      PinBackLeft1.mirror = true;
      setRotation(PinBackLeft1, 0F, 0F, 0F);
      PinForRight1 = new ModelRenderer(this, 70, 0);
      PinForRight1.addBox(0F, 0F, 0F, 1, 6, 3);
      PinForRight1.setRotationPoint(5F, 9F, -7F);
      PinForRight1.setTextureSize(128, 128);
      PinForRight1.mirror = true;
      setRotation(PinForRight1, 0F, 0F, 0F);
      PinBackRight1 = new ModelRenderer(this, 70, 0);
      PinBackRight1.addBox(0F, 0F, 0F, 1, 5, 3);
      PinBackRight1.setRotationPoint(5F, 10F, 4F);
      PinBackRight1.setTextureSize(128, 128);
      PinBackRight1.mirror = true;
      setRotation(PinBackRight1, 0F, 0F, 0F);
      PinForRight2 = new ModelRenderer(this, 70, 0);
      PinForRight2.addBox(0F, 0F, 0F, 3, 6, 1);
      PinForRight2.setRotationPoint(4F, 9F, -6F);
      PinForRight2.setTextureSize(128, 128);
      PinForRight2.mirror = true;
      setRotation(PinForRight2, 0F, 0F, 0F);
      PinBackLeft2 = new ModelRenderer(this, 70, 0);
      PinBackLeft2.addBox(0F, 0F, 0F, 3, 5, 1);
      PinBackLeft2.setRotationPoint(-7F, 10F, 5F);
      PinBackLeft2.setTextureSize(128, 128);
      PinBackLeft2.mirror = true;
      setRotation(PinBackLeft2, 0F, 0F, 0F);
      PinBackRight2 = new ModelRenderer(this, 70, 0);
      PinBackRight2.addBox(0F, 0F, 0F, 3, 5, 1);
      PinBackRight2.setRotationPoint(4F, 10F, 5F);
      PinBackRight2.setTextureSize(128, 128);
      PinBackRight2.mirror = true;
      setRotation(PinBackRight2, 0F, 0F, 0F);
      PinForLeft2 = new ModelRenderer(this, 70, 0);
      PinForLeft2.addBox(0F, 0F, 0F, 3, 6, 1);
      PinForLeft2.setRotationPoint(-7F, 9F, -6F);
      PinForLeft2.setTextureSize(128, 128);
      PinForLeft2.mirror = true;
      setRotation(PinForLeft2, 0F, 0F, 0F);
      CentreBox = new ModelRenderer(this, 0, 17);
      CentreBox.addBox(0F, 0F, 0F, 8, 12, 8);
      CentreBox.setRotationPoint(-4F, 11F, -4F);
      CentreBox.setTextureSize(128, 128);
      CentreBox.mirror = true;
      setRotation(CentreBox, 0F, 0F, 0F);
      Plate = new ModelRenderer(this, 34, 17);
      Plate.addBox(0F, 0F, 0F, 14, 1, 14);
      Plate.setRotationPoint(-7F, 10F, -7F);
      Plate.setTextureSize(128, 128);
      Plate.mirror = true;
      setRotation(Plate, 0F, 0F, 0F);
      RimBack = new ModelRenderer(this, 66, 14);
      RimBack.addBox(0F, 0F, 0F, 12, 1, 1);
      RimBack.setRotationPoint(-6F, 9F, 5F);
      RimBack.setTextureSize(128, 128);
      RimBack.mirror = true;
      setRotation(RimBack, 0F, 0F, 0F);
      TopCentreCube = new ModelRenderer(this, 57, 12);
      TopCentreCube.addBox(0F, 0F, 0F, 2, 2, 2);
      TopCentreCube.setRotationPoint(-1F, 8F, -1F);
      TopCentreCube.setTextureSize(128, 128);
      TopCentreCube.mirror = true;
      setRotation(TopCentreCube, 0F, 0F, 0F);
      RimLeft = new ModelRenderer(this, 79, 0);
      RimLeft.addBox(0F, 0F, 0F, 1, 1, 12);
      RimLeft.setRotationPoint(-6F, 9F, -6F);
      RimLeft.setTextureSize(128, 128);
      RimLeft.mirror = true;
      setRotation(RimLeft, 0F, 0F, 0F);
      RimRight = new ModelRenderer(this, 79, 0);
      RimRight.addBox(0F, 0F, 0F, 1, 1, 12);
      RimRight.setRotationPoint(5F, 9F, -6F);
      RimRight.setTextureSize(128, 128);
      RimRight.mirror = true;
      setRotation(RimRight, 0F, 0F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
	System.out.println("Extractor being rendered");
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    Base.render(f5);
    LegForLeft.render(f5);
    LefBackRight.render(f5);
    LegBackLeft.render(f5);
    LegForRight.render(f5);
    PinForLeft1.render(f5);
    PinBackLeft1.render(f5);
    PinForRight1.render(f5);
    PinBackRight1.render(f5);
    PinForRight2.render(f5);
    PinBackLeft2.render(f5);
    PinBackRight2.render(f5);
    PinForLeft2.render(f5);
    CentreBox.render(f5);
    Plate.render(f5);
    RimBack.render(f5);
    TopCentreCube.render(f5);
    RimLeft.render(f5);
    RimRight.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, null);
  }

}
